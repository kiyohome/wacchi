/* tslint:disable */
/* eslint-disable */
/**
 * PUT REST API
 * モバイルアプリハンズオンで作成するPUTアプリのREST API。
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineObject,
    InlineObjectFromJSON,
    InlineObjectToJSON,
} from '../models';

export interface LoginRequest {
    inlineObject: InlineObject;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * ユーザー情報で認証を行い、認証に成功した場合はログインする。 一部のREST APIを利用するためには、このREST APIを利用して事前にログインしておく必要がある。 ログイン状態は、ログアウトするREST APIを呼び出すか、一定時間が経過するまで継続する。 
     * ログイン
     */
    async loginRaw(requestParameters: LoginRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.inlineObject === null || requestParameters.inlineObject === undefined) {
            throw new runtime.RequiredError('inlineObject','Required parameter requestParameters.inlineObject was null or undefined when calling login.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObjectToJSON(requestParameters.inlineObject),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ユーザー情報で認証を行い、認証に成功した場合はログインする。 一部のREST APIを利用するためには、このREST APIを利用して事前にログインしておく必要がある。 ログイン状態は、ログアウトするREST APIを呼び出すか、一定時間が経過するまで継続する。 
     * ログイン
     */
    async login(requestParameters: LoginRequest): Promise<void> {
        await this.loginRaw(requestParameters);
    }

    /**
     * ログイン中である場合、ログアウトする。 
     * ログアウト
     */
    async logoutRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ログイン中である場合、ログアウトする。 
     * ログアウト
     */
    async logout(): Promise<void> {
        await this.logoutRaw();
    }

}
